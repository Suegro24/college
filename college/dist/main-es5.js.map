{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/college-list/college-list.component.ts","webpack:///src/app/college-list/college-list.component.html","webpack:///src/app/college.service.ts","webpack:///src/app/college.ts","webpack:///src/app/create/create.component.ts","webpack:///src/app/create/create.component.html","webpack:///src/app/update/update.component.ts","webpack:///src/app/update/update.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","dialog","title","isAddSuccess","selector","templateUrl","styleUrls","MaterialComponents","AppModule","declarations","entryComponents","imports","providers","bootstrap","ReadComponent","collegeService","colleges","getColleges","dialogRef","open","afterClosed","subscribe","result","data","deleteCollege","filter","college","addDialog","CollegeService","http","url","typesOfCollege","get","post","put","providedIn","College","name","country","city","rector","type","numberOfStudents","foundationYear","CreateComponent","collegeModel","addCollege","getTypesOfColleges","UpdateComponent","typesOfColleges","editCollege","getCollege","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  title = 'college';\n  isAddSuccess = false;\n\n  constructor(public dialog: MatDialog) {}\n\n}\n","<div class=\"container\">\r\n    <p class=\"text--title__white\">List of colleges</p>\r\n    <app-college-list></app-college-list>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { AppComponent } from './app.component';\nimport { ReadComponent } from './college-list/college-list.component';\nimport { CreateComponent } from './create/create.component';\nimport { UpdateComponent } from './update/update.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nconst MaterialComponents = [\n  MatCardModule,\n  MatIconModule,\n  MatButtonModule,\n  MatDialogModule\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ReadComponent,\n    CreateComponent,\n    UpdateComponent,\n  ],\n  entryComponents: [CreateComponent],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MaterialComponents\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { CollegeService } from '../college.service';\nimport { UpdateComponent } from '../update/update.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { CreateComponent } from '../create/create.component';\n\n@Component({\n  selector: 'app-college-list',\n  templateUrl: './college-list.component.html',\n  styleUrls: ['./college-list.component.scss']\n})\nexport class ReadComponent implements OnInit {\n\n  colleges = [];\n\n  constructor(public dialog: MatDialog, private collegeService: CollegeService) { }\n\n  ngOnInit(): void {\n    this.getColleges();\n  }\n\n  addDialog() {\n    const dialogRef = this.dialog.open(CreateComponent);\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.getColleges();\n      }\n    });\n    }\n\n  editDialog(id: number) {\n    const dialogRef = this.dialog.open(UpdateComponent, {data: ( {id} )});\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.getColleges();\n      }\n    });\n  }\n\n  deleteCollege(id: number) {\n    this.collegeService.deleteCollege(id).subscribe(() => {\n      this.colleges = this.colleges.filter(college => college.id !== id);\n    });\n  }\n\n  getColleges() {\n    this.collegeService.getColleges().subscribe(data => this.colleges = data);\n  }\n\n}\n","<mat-card class=\"college-card\" *ngFor=\"let college of colleges\">\n    <mat-card-header>\n        <div mat-card-avatar><mat-icon>school</mat-icon></div>\n        <mat-card-title>{{college.name}}</mat-card-title>\n        <mat-card-subtitle>{{college.type}}</mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content class=\"card-content\">\n        <div class=\"card-content--item\">\n            <mat-icon>location_on</mat-icon>\n            <p>{{college.country}}, {{college.city}}</p>\n        </div>\n        <div class=\"card-content--item\">\n            <mat-icon>person</mat-icon>\n            <p>{{college.rector}}</p>\n        </div>\n        <div class=\"card-content--item\">\n            <mat-icon>people</mat-icon>\n            <p>{{college.numberOfStudents}}</p>\n        </div>\n        <div class=\"card-content--item\">\n            <mat-icon>schedule</mat-icon>\n            <p>{{college.foundationYear}}</p>\n        </div>\n    </mat-card-content>\n    <mat-card-actions align=\"end\">\n        <button mat-raised-button (click)=\"editDialog(college.id)\"><mat-icon>edit</mat-icon></button>\n        <button mat-raised-button color=\"warn\" (click)=\"deleteCollege(college.id)\"><mat-icon>remove</mat-icon></button>\n    </mat-card-actions>\n</mat-card>\n<button mat-raised-button class=\"button__green button--add\" (click)=\"addDialog()\"><mat-icon>add</mat-icon></button>\n","import { Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\nimport { Observable} from 'rxjs';\nimport { College } from './college';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CollegeService {\n\n  url = 'http://localhost:3001/api/college';\n\n  typesOfCollege = [\n    'University',\n    'Polytechnic',\n    'Naval academy',\n    'Music academy',\n    'Physical education academy',\n    'Academy of fine art',\n    'Economic university',\n    'Medical college',\n    'Agricultural college',\n    'Pedagogical college',\n    'Military college',\n    'Theological college',\n    'State theater school',\n    'State higher vocational school'\n  ];\n\n  constructor(private http: HttpClient) { }\n\n  getCollege(id: number) {\n    return this.http.get<College>(this.url + `/${id}`);\n  }\n\n  getColleges(): Observable<College[]> {\n    return this.http.get<College[]>(this.url);\n  }\n\n  addCollege(college: College) {\n    return this.http.post<College>(this.url, college);\n  }\n\n  deleteCollege(id: number) {\n    return this.http.delete<College>(this.url + `/delete/${id}`);\n  }\n\n  editCollege(college: College) {\n    return this.http.put<College>(this.url + `/put/${college.id}`, college);\n  }\n\n  getTypesOfColleges() {\n    return this.typesOfCollege;\n  }\n}\n","export class College {\r\n\r\n    constructor(\r\n        public id: number,\r\n        public name: string,\r\n        public country: string,\r\n        public city: string,\r\n        public rector: string,\r\n        public type: string,\r\n        public numberOfStudents: number,\r\n        public foundationYear: number,\r\n        ) { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { College } from '../college';\nimport { CollegeService } from '../college.service';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.scss']\n})\nexport class CreateComponent implements OnInit {\n\n  constructor(private collegeService: CollegeService) { }\n\n  typesOfCollege = [];\n\n  collegeModel = new College(null, '', '', '', '', '', null, null);\n\n  addCollege() {\n    this.collegeService.addCollege(this.collegeModel).subscribe();\n  }\n\n  ngOnInit(): void {\n    this.typesOfCollege = this.collegeService.getTypesOfColleges();\n  }\n\n}\n","<h2 mat-dialog-title align=\"center\">Dodawanie uczelni</h2>\n<mat-dialog-content>\n    <form class=\"form\" #addCollegeForm=\"ngForm\" (ngSubmit)=\"addCollege()\">\n\n        <div class=\"form-group\">\n            <input [class.input--warn]=\"name.invalid && name.touched\" type=\"text\" placeholder=\"Name\" name=\"name\" \n            [(ngModel)]=\"collegeModel.name\" #name=\"ngModel\" pattern=\".{1,64}\" required>\n            <div *ngIf=\"name.errors && (name.invalid || name.touched)\">\n                <p class=\"text--warn\" *ngIf=\"name.errors.required\">Name is required</p>\n                <p class=\"text--warn\" *ngIf=\"name.errors.pattern\">Name can`t be longer than 64 characters</p>\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"text\" [class.input--warn]=\"country.invalid && country.touched\" placeholder=\"Country\" name=\"country\" [(ngModel)]=\"collegeModel.country\" #country=\"ngModel\" pattern=\".{3,10}\" required>\n            <div *ngIf=\"country.errors && country.touched\">\n                <p class=\"text--warn\" *ngIf=\"country.errors.required\">Country is required</p>\n                <p class=\"text--warn\" *ngIf=\"country.errors.pattern\">Country`s name have to be between 3 and 10 characters</p>\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"text\" [class.input--warn]=\"city.invalid && city.touched\" placeholder=\"City\" name=\"city\" [(ngModel)]=\"collegeModel.city\" #city=\"ngModel\" pattern=\".{1,20}\" required>\n            <div *ngIf=\"city.errors && city.touched\">\n                <p class=\"text--warn\" *ngIf=\"city.errors.required\">City is required</p>\n                <p class=\"text--warn\" *ngIf=\"city.errors.pattern\">City`s name have to be between 1 and 20 characters</p>\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"text\" [class.input--warn]=\"rector.invalid && rector.touched\" placeholder=\"Rector\" name=\"rector\" [(ngModel)]=\"collegeModel.rector\" #rector=\"ngModel\" pattern=\".{1,40}\" required>\n            <div *ngIf=\"rector.errors && rector.touched\">\n                <p class=\"text--warn\" *ngIf=\"rector.errors.required\">Rector is required</p>\n                <p class=\"text--warn\" *ngIf=\"rector.errors.pattern\">Rector`s name have to be between 1 and 40 characters</p>\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <select class=\"select\" name=\"type\" [(ngModel)]=\"collegeModel.type\" required>\n                <option disabled selected value=\"\">Select type of college</option>\n                <option *ngFor=\"let type of typesOfCollege\">{{ type }}</option>\n            </select>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"number\" [class.input--warn]=\"number.invalid && number.touched\" placeholder=\"Number of students\" name=\"numberOfStudents\" #number=\"ngModel\" pattern=\".{1,6}\" required [(ngModel)]=\"collegeModel.numberOfStudents\">\n            <div *ngIf=\"number.errors && number.touched\">\n                <p class=\"text--warn\" *ngIf=\"number.errors.required\">Number is required</p>\n                <p class=\"text--warn\" *ngIf=\"number.errors.pattern\">Number have to be between 1 and 999999</p>\n            </div>\n        </div>\n        \n        <div class=\"form-group\">\n            <input type=\"number\" [class.input--warn]=\"year.invalid && year.touched\" placeholder=\"Foundation year\" name=\"foundationYear\" [(ngModel)]=\"collegeModel.foundationYear\" #year=\"ngModel\" pattern=\".{3,4}\" required>\n            <div *ngIf=\"year.errors && year.touched\">\n                <p class=\"text--warn\" *ngIf=\"year.errors.required\">Foundation year is required</p>\n                <p class=\"text--warn\" *ngIf=\"year.errors.pattern\">Year have to be between 100 and 9999</p>\n            </div>\n        </div>\n\n        <mat-dialog-actions align=\"end\">\n            <button [disabled]=\"addCollegeForm.form.invalid\" class=\"button__green\" type=\"submit\" mat-raised-button [mat-dialog-close]=\"true\">Add</button>\n            <button mat-raised-button color=\"warn\" [mat-dialog-close]=\"false\">Cancel</button>\n        </mat-dialog-actions>\n        \n    </form>\n</mat-dialog-content>\n\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { College } from '../college';\nimport { CollegeService } from '../college.service';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-update',\n  templateUrl: './update.component.html',\n  styleUrls: ['./update.component.scss']\n})\nexport class UpdateComponent implements OnInit {\n\n  constructor(private collegeService: CollegeService, @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n  collegeModel = new College(null, '', '', '', '', '', null, null);\n  typesOfColleges = [];\n\n  editCollege() {\n    this.collegeService.editCollege(this.collegeModel).subscribe();\n  }\n\n  ngOnInit(): void {\n    this.collegeService.getCollege(this.data.id).subscribe(data => this.collegeModel = data);\n    this.typesOfColleges = this.collegeService.getTypesOfColleges();\n  }\n\n}\n","<h2 mat-dialog-title align=\"center\">Edytowanie uczelni z id = {{data.id}}</h2>\n<mat-dialog-content>\n    <form class=\"form\" #editCollegeForm=\"ngForm\" (ngSubmit)=\"editCollege()\">\n\n        <div class=\"form-group\">\n            <input [class.input--warn]=\"name.invalid && name.touched\" type=\"text\" placeholder=\"Name\" name=\"name\" \n            [(ngModel)]=\"collegeModel.name\" #name=\"ngModel\" pattern=\".{1,64}\" required>\n            <div *ngIf=\"name.errors && (name.invalid || name.touched)\">\n                <p class=\"text--warn\" *ngIf=\"name.errors.required\">Name is required</p>\n                <p class=\"text--warn\" *ngIf=\"name.errors.pattern\">Name can`t be longer than 64 characters</p>\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"text\" [class.input--warn]=\"country.invalid && country.touched\" placeholder=\"Country\" name=\"country\" [(ngModel)]=\"collegeModel.country\" #country=\"ngModel\" pattern=\".{3,10}\" required>\n            <div *ngIf=\"country.errors && country.touched\">\n                <p class=\"text--warn\" *ngIf=\"country.errors.required\">Country is required</p>\n                <p class=\"text--warn\" *ngIf=\"country.errors.pattern\">Country`s name have to be between 3 and 10 characters</p>\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"text\" [class.input--warn]=\"city.invalid && city.touched\" placeholder=\"City\" name=\"city\" [(ngModel)]=\"collegeModel.city\" #city=\"ngModel\" pattern=\".{1,20}\" required>\n            <div *ngIf=\"city.errors && city.touched\">\n                <p class=\"text--warn\" *ngIf=\"city.errors.required\">City is required</p>\n                <p class=\"text--warn\" *ngIf=\"city.errors.pattern\">City`s name have to be between 1 and 20 characters</p>\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"text\" [class.input--warn]=\"rector.invalid && rector.touched\" placeholder=\"Rector\" name=\"rector\" [(ngModel)]=\"collegeModel.rector\" #rector=\"ngModel\" pattern=\".{1,50}\" required>\n            <div *ngIf=\"rector.errors && rector.touched\">\n                <p class=\"text--warn\" *ngIf=\"rector.errors.required\">Rector is required</p>\n                <p class=\"text--warn\" *ngIf=\"rector.errors.pattern\">Rector`s name have to be between 1 and 50 characters</p>\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <select class=\"select\" name=\"type\" [(ngModel)]=\"collegeModel.type\">\n                <option disabled selected value=\"\">Select type of college</option>\n                <option *ngFor=\"let type of typesOfColleges\">{{ type }}</option>\n            </select>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"number\" [class.input--warn]=\"number.invalid && number.touched\" placeholder=\"Number of students\" name=\"numberOfStudents\" #number=\"ngModel\" pattern=\".{1,6}\" required [(ngModel)]=\"collegeModel.numberOfStudents\">\n            <div *ngIf=\"number.errors && number.touched\">\n                <p class=\"text--warn\" *ngIf=\"number.errors.required\">Number is required</p>\n                <p class=\"text--warn\" *ngIf=\"number.errors.pattern\">Number have to be between 1 and 999999</p>\n            </div>\n        </div>\n        \n        <div class=\"form-group\">\n            <input type=\"number\" [class.input--warn]=\"year.invalid && year.touched\" placeholder=\"Foundation year\" name=\"foundationYear\" [(ngModel)]=\"collegeModel.foundationYear\" #year=\"ngModel\" pattern=\".{3,4}\" required>\n            <div *ngIf=\"year.errors && year.touched\">\n                <p class=\"text--warn\" *ngIf=\"year.errors.required\">Foundation year is required</p>\n                <p class=\"text--warn\" *ngIf=\"year.errors.pattern\">Year have to be between 100 and 9999</p>\n            </div>\n        </div>\n\n        <mat-dialog-actions align=\"end\">\n            <button [disabled]=\"editCollegeForm.form.invalid\" class=\"button__green\" type=\"submit\" mat-raised-button [mat-dialog-close]=\"true\">Edit</button>\n            <button mat-raised-button color=\"warn\" [mat-dialog-close]=\"false\">Cancel</button>\n        </mat-dialog-actions>\n        \n    </form>\n</mat-dialog-content>\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}